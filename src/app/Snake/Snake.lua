---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by iCocos.
--- DateTime: 2018/10/11 下午12:13
---

--- @class Snake
local Snake = class("Snake")
local Body = require("app.Snake.Body")

-- 蛇长度，本地变量，只供蛇使用
local cIntLen = 10

---ctor 构造方法
---@param node table
function Snake:ctor(node)

    self.BodyArray = {}
    self.node = node

    for i = 1, cIntLen do

        self:Grow(i == 1)

    end

    self:setDir(L_D) -- self.ModeDict = L_D

end

---GetTailGrid 获取蛇尾部的各自
function Snake:GetTailGrid()

    if #self.BodyArray == 0 then
        return 0, 0
    end

    local tail = self.BodyArray[#self.BodyArray]

    return tail.X, tail.Y

end

---GetHeadGrid 获取蛇头部的各自
function Snake:GetHeadGrid()
    
    if #self.BodyArray == 0 then
        return 0, 0
    end

    local head = self.BodyArray[1]

    return head.X, head.Y

end

---Grow 蛇的身体增长
---@param isHead table
function Snake:Grow(isHead)

    local tailX, tailY = self:GetTailGrid()
    local body = Body.new(self, tailX, tailY, self.node, isHead)

    table.insert(self.BodyArray, body)

end

---OffsetGridBydict  计算蛇的移动方向和位移，cocos往下是减
---@param x table
---@param y table
---@param dict table
local function OffsetGridBydict(x, y, dict)

    if dict == L_D then
        return x-1,y
    elseif dict == R_D then
        return x+1,y
    elseif dict == U_D then
        return x,y-1
    elseif dict == D_D then
        return x,y+1
    end

    return x, y

end

-- 移动方向
local dirTable = {
    ["left"] = "h",
    ["right"] = "h",
    ["up"] = "v",
    ["down"] = "v",
}

-- 头部方向旋转
local headTable = {
    ["left"] = 90,
    ["right"] = -90,
    ["up"] = 0,
    ["down"] = 180,
}

---setDir 设置移动方向和头部图像的方向（旋转）
---@param dir table
function Snake:setDir(dir)

    if dirTable[dir] == dirTable[self.ModeDict] then
        return
    end

    self.ModeDict = dir

    local head = self.BodyArray[1]
    head.sp:setRotation(headTable[self.ModeDict])
    

end

---update 蛇的身体随着方向的移动
function Snake:update()

    if #self.BodyArray == 0 then
        return
    end

    for i = #self.BodyArray, 1, -1 do

        local body = self.BodyArray[i]

        print(type(body))

        if i == 1 then
            body.X, body.Y = OffsetGridBydict(body.X, body.Y, self.ModeDict)
        else
            local font = self.BodyArray[i-1]
            body.X, body.Y = font.X, font.Y
        end

        body:update()

    end

end

---CheckSelfCollide 检查自身碰撞
function Snake:CheckSelfCollide()
    
    if #self.BodyArray < 2 then
        return
    end

    local headX, headY = self:GetHeadGrid()

    for i = 2, #self.BodyArray do
        
        local body = self.BodyArray[i]
        if body.X == headX and body.Y == headY then
            return true
        end

    end

    return false

end

---Kill 杀蛇
function Snake:Kill()
    
    for _, body in ipairs(self.BodyArray) do
        
        self.node:removeChild(body.sp)
        print("Kill")
    end

end

---Blink 死亡闪烁
---@param callback table
function Snake:Blink(callback)

    for index, body in ipairs(self.BodyArray) do
        
        local blink = cc.Blink:create(3, 5) -- 时间，次数

        if index == 1 then

            -- 创建一个序列的Action， 把blink和callback的调用合在一起，顺序执行
            local a = cc.Sequence:create(blink, cc.CallFunc:create(callback))
            body.sp:runAction(a)
        
        else

            body.sp:runAction(blink)

        end

    end

end

return Snake